#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# üöÄ Dev Cleanup Utility üßπ
# -----------------------------------------------------------------------------

# --- Colors for pretty printing ---
if [ -t 1 ]; then
    GREEN="\033[0;32m"
    YELLOW="\033[0;33m"
    RED="\033[0;31m"
    BLUE="\033[0;34m"
    CYAN="\033[0;36m"
    MAGENTA="\033[0;35m"
    NC="\033[0m"
    BOLD="\033[1m"
    FAINT="\033[2m"
else
    GREEN=""
    YELLOW=""
    RED=""
    BLUE=""
    CYAN=""
    MAGENTA=""
    NC=""
    BOLD=""
    FAINT=""
fi

# --- Global Variables ---
SCRIPT_VERSION="1.1.0"
GITHUB_REPO="https://github.com/jemishavasoya/dev-cleaner"

# Logo
print_logo() {
    echo -e "${CYAN}${BOLD}"
    # Using 'cat << "EOF"' with no leading space on the logo lines ensures perfect alignment.
    cat << "EOF"
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù      ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# --- Helper Functions ---
print_header_line() {
    local char="${1:-‚îÄ}"
    printf "%$(tput cols)s\n" "" | tr " " "$char"
}

print_section_header() {
    echo -e "${BLUE}${BOLD}‚û§ $1${NC}"
    print_header_line "‚îÄ"
}

print_item() {
    local icon="${1}"
    local color="${2}"
    local text="${3}"
    echo -e "${color}${icon} ${text}${NC}"
}

get_disk_space() {
    df -h . | awk 'NR==2 {print $4}'
}

# Human-readable directory size
get_dir_size_human() {
    local dir_path="$1"
    du -sh "$dir_path" 2>/dev/null | awk '{print $1}'
}

# Collect candidate local build artifact directories under a root
find_local_build_artifacts() {
    local search_root="$1"
    local max_depth="$2"

    # Common build/output directories across ecosystems
    # - Flutter/Dart: build
    # - Node.js/TypeScript: dist, out
    # - Rust: target
    # - Go/C/C++: bin, build
    # Exclusions prevent deep scan into heavy dependency or VCS folders
    find "$search_root" \
        -maxdepth "$max_depth" \
        \( -name .git -o -name .svn -o -name .hg -o -name .idea -o -name .vscode -o -name node_modules -o -name Pods -o -name Carthage -o -name vendor -o -name .venv -o -name venv -o -name .dart_tool -o -name .gradle -o -name .cache -o -name .next -o -name target/debug -o -name target/release \) -prune -o \
        -type d \
        \( -name build -o -name dist -o -name out -o -name target -o -name bin \) \
        -print 2>/dev/null
}

# Interactive scan and cleanup for local build artifacts
cleanup_local_build_artifacts() {
    echo -e "${YELLOW}${BOLD}‚ö†Ô∏è Advanced: Scan and delete local project build folders${NC}"
    echo -e "${YELLOW}This feature recursively scans your directories for build output folders like 'build', 'dist', 'out', 'target', 'bin'.${NC}"
    echo -e "${YELLOW}These are generally safe to delete because they can be regenerated by builds/tests, but verify carefully.${NC}"
    echo ""

    read -e -p "Enter root directory to scan [default: current directory]: " scan_root
    if [ -z "$scan_root" ]; then
        scan_root="$(pwd)"
    fi

    if [ ! -d "$scan_root" ]; then
        echo -e "${RED}Provided path is not a directory. Aborting.${NC}"
        return
    fi

    local max_depth
    read -p "Max scan depth (recommended 6) [default: 6]: " max_depth
    if [ -z "$max_depth" ]; then
        max_depth=6
    fi

    echo ""
    print_section_header "Scanning for local build artifacts"
    echo -e "Root: ${BOLD}$scan_root${NC} | Depth: ${BOLD}$max_depth${NC}"

    # Populate candidates array in a way compatible with macOS Bash 3.2 (no mapfile)
    candidates=()
    while IFS= read -r _cand; do
        [ -n "$_cand" ] && candidates+=("$_cand")
    done < <(find_local_build_artifacts "$scan_root" "$max_depth")

    if [ ${#candidates[@]} -eq 0 ]; then
        print_item "‚úï" "${YELLOW}" "No build artifact folders found under the specified root."
        return
    fi

    echo -e "${BLUE}${BOLD}Found ${#candidates[@]} candidate folder(s):${NC}"
    local sizes=()
    local total_bytes=0

    # Show a numbered list with sizes
    for idx in "${!candidates[@]}"; do
        local p="${candidates[$idx]}"
        local size_human="$(get_dir_size_human "$p")"
        sizes+=("$size_human")
        echo -e "  ${GREEN}$((idx+1)).${NC} ${p}  ${FAINT}(${size_human})${NC}"
    done

    echo ""
    echo -e "${YELLOW}You can choose what to delete:${NC}"
    echo -e "- Enter a comma-separated list (e.g., 1,3,5) to delete specific items"
    echo -e "- Enter 'all' to delete all listed items"
    echo -e "- Enter anything else to cancel"
    echo ""

    read -p "Your selection: " selection

    if [ "$selection" != "all" ]; then
        # Normalize list into indices
        IFS=',' read -r -a chosen <<< "$selection"
        if [ ${#chosen[@]} -eq 0 ]; then
            echo -e "${YELLOW}No valid selection provided. Cancelled.${NC}"
            return
        fi
        # Build a filtered list
        local filtered=()
        for n in "${chosen[@]}"; do
            n="$(echo "$n" | tr -d ' ')"
            if [[ "$n" =~ ^[0-9]+$ ]] && [ "$n" -ge 1 ] && [ "$n" -le ${#candidates[@]} ]; then
                filtered+=("${candidates[$((n-1))]}")
            fi
        done
        if [ ${#filtered[@]} -eq 0 ]; then
            echo -e "${YELLOW}No valid indices selected. Cancelled.${NC}"
            return
        fi
        candidates=("${filtered[@]}")
    fi

    echo ""
    print_section_header "Deletion Preview"
    for p in "${candidates[@]}"; do
        local size_human="$(get_dir_size_human "$p")"
        echo -e "  ${RED}‚úñ${NC} ${p}  ${FAINT}(${size_human})${NC}"
    done
    echo ""
    echo -e "${YELLOW}${BOLD}Final warning:${NC} These folders will be permanently deleted. Ensure there is no unsynced output you need."
    read -p "Type 'DELETE' to confirm: " confirm_a
    if [ "$confirm_a" != "DELETE" ]; then
        echo -e "${YELLOW}Confirmation mismatch. Cancelled.${NC}"
        return
    fi
    read -p "Type the number of items to delete (${#candidates[@]}) to proceed: " confirm_b
    if [ "$confirm_b" != "${#candidates[@]}" ]; then
        echo -e "${YELLOW}Confirmation mismatch. Cancelled.${NC}"
        return
    fi

    echo ""
    print_section_header "Deleting selected folders"
    local deleted_count=0
    for p in "${candidates[@]}"; do
        # Safety: ensure path is under scan_root
        case "$p" in
            "$scan_root"|"$scan_root"/*)
                rm -rf "$p" 2>/dev/null && print_item "‚úì" "${GREEN}" "Deleted: $p" || print_item "‚úï" "${YELLOW}" "Failed: $p"
                deleted_count=$((deleted_count+1))
                ;;
            *)
                print_item "‚úï" "${YELLOW}" "Skipped (outside root): $p"
                ;;
        esac
    done

    echo ""
    print_item "‚úì" "${GREEN}" "Completed deletion of ${deleted_count} item(s)."
}

# --- Cleanup Functions ---
cleanup_xcode() {
    print_item "‚úì" "${GREEN}" "Clearing Xcode DerivedData..."
    rm -rf ~/Library/Developer/Xcode/DerivedData/
    print_item "‚úì" "${GREEN}" "Removing old Simulator devices..."
    rm -rf ~/Library/Developer/CoreSimulator/Devices/
    print_item "‚úì" "${GREEN}" "Removing old device support files..."
    rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport/
    print_item "‚úì" "${GREEN}" "Removing Xcode caches..."
    rm -rf ~/Library/Caches/com.apple.dt.Xcode/
}

cleanup_android() {
    if [ -d "$HOME/.gradle" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Gradle caches..."
        rm -rf ~/.gradle/caches/
        rm -rf ~/.gradle/daemon/
    else
        print_item "‚úï" "${YELLOW}" "Gradle directory not found. Skipping."
    fi
    print_item "‚úì" "${GREEN}" "Cleaning Android Studio caches..."
    rm -rf ~/Library/Caches/Google/AndroidStudio*
    rm -rf ~/Library/Caches/JetBrains/AndroidStudio*
}

cleanup_flutter() {
    if command -v flutter &> /dev/null; then
        print_item "‚úì" "${GREEN}" "Cleaning Flutter project builds (flutter clean)..."
        # Find all pubspec.yaml files and run 'flutter clean' in their directories
        find . -name "pubspec.yaml" -maxdepth 4 -execdir flutter clean \;
        print_item "‚úì" "${GREEN}" "Cleaning Flutter global cache..."
        flutter cache clean
    else
        print_item "‚úï" "${YELLOW}" "Flutter command not found. Skipping."
    fi
}

cleanup_npm_yarn() {
    if command -v npm &> /dev/null; then
        print_item "‚úì" "${GREEN}" "Cleaning npm cache..."
        npm cache clean --force
    else
        print_item "‚úï" "${YELLOW}" "npm not found. Skipping."
    fi
    if command -v yarn &> /dev/null; then
        print_item "‚úì" "${GREEN}" "Cleaning yarn cache..."
        yarn cache clean
    else
        print_item "‚úï" "${YELLOW}" "yarn not found. Skipping."
    fi
    if command -v pnpm &> /dev/null; then
        print_item "‚úì" "${GREEN}" "Pruning pnpm store..."
        pnpm store prune
    else
        print_item "‚úï" "${YELLOW}" "pnpm not found. Skipping."
    fi
}

cleanup_homebrew() {
    if command -v brew &> /dev/null; then
        print_item "‚úì" "${GREEN}" "Cleaning Homebrew (brew)..."
        brew cleanup
    else
        print_item "‚úï" "${YELLOW}" "Homebrew not found. Skipping."
    fi
}

cleanup_cocoapods() {
    if [ -d "$HOME/.cocoapods" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning CocoaPods cache..."
        rm -rf ~/.cocoapods/repos/
        rm -rf ~/Library/Caches/CocoaPods/
    else
        print_item "‚úï" "${YELLOW}" "CocoaPods not found. Skipping."
    fi
}

cleanup_ide_caches() {
    print_item "‚úì" "${GREEN}" "Cleaning general JetBrains IDE caches..."
    rm -rf ~/Library/Caches/JetBrains/
    print_item "‚úì" "${GREEN}" "Cleaning VSCode cache..."
    rm -rf ~/Library/Application\ Support/Code/Cache/
    rm -rf ~/Library/Application\ Support/Code/CachedData/
    rm -rf ~/Library/Application\ Support/Code/User/workspaceStorage/
}

cleanup_system_junk() {
    print_item "‚úì" "${GREEN}" "Emptying the Trash..."
    sudo rm -rf ~/.Trash/*
    sudo rm -rf /Volumes/*/.Trashes/*
    print_item "‚úì" "${GREEN}" "Cleaning system-level library caches..."
    sudo rm -rf /Library/Caches/*
    print_item "‚úì" "${GREEN}" "Cleaning user-level log files..."
    rm -rf ~/Library/Logs/*
    print_item "‚úì" "${GREEN}" "Cleaning system-level log files..."
    sudo rm -rf /private/var/log/*
    sudo rm -rf /Library/Logs/*
}

cleanup_browser_caches() {
    if [ -d "$HOME/Library/Caches/Google/Chrome" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Chrome cache..."
        rm -rf ~/Library/Caches/Google/Chrome/*
    else
        print_item "‚úï" "${YELLOW}" "Chrome cache not found. Skipping."
    fi
    if [ -d "$HOME/Library/Caches/BraveSoftware/Brave-Browser" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Brave cache..."
        rm -rf ~/Library/Caches/BraveSoftware/Brave-Browser/*
    else
        print_item "‚úï" "${YELLOW}" "Brave cache not found. Skipping."
    fi
    if [ -d "$HOME/Library/Caches/Firefox" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Firefox cache..."
        rm -rf ~/Library/Caches/Firefox/*
    else
        print_item "‚úï" "${YELLOW}" "Firefox cache not found. Skipping."
    fi
    if [ -d "$HOME/Library/Caches/com.apple.Safari" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Safari cache..."
        rm -rf ~/Library/Caches/com.apple.Safari/*
    else
        print_item "‚úï" "${YELLOW}" "Safari cache not found. Skipping."
    fi
    if [ -d "$HOME/Library/Caches/Microsoft Edge" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Microsoft Edge cache..."
        rm -rf ~/Library/Caches/Microsoft\ Edge/*
    elif [ -d "$HOME/Library/Caches/com.microsoft.edgemac" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Microsoft Edge cache..."
        rm -rf ~/Library/Caches/com.microsoft.edgemac/*
    else
        print_item "‚úï" "${YELLOW}" "Microsoft Edge cache not found. Skipping."
    fi
    if [ -d "$HOME/Library/Caches/com.operasoftware.Opera" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Opera cache..."
        rm -rf ~/Library/Caches/com.operasoftware.Opera/*
    else
        print_item "‚úï" "${YELLOW}" "Opera cache not found. Skipping."
    fi
    if [ -d "$HOME/Library/Caches/com.operasoftware.OperaGX" ]; then
        print_item "‚úì" "${GREEN}" "Cleaning Opera GX cache..."
        rm -rf ~/Library/Caches/com.operasoftware.OperaGX/*
    fi
}

# --- Main Display Function ---
display_menu() {
    clear
    local current_free_space=$(get_disk_space)

    print_logo
    echo -e "${FAINT}  Version: v${SCRIPT_VERSION}${NC}" # Display version
    print_item "‚ú®" "${GREEN}" "Free Space: ${current_free_space}"
    echo ""
    print_section_header "Available Options:"
    echo -e "${RED} 0.${NC} ${BOLD}Exit Program${NC}"
    echo -e "${GREEN} 1.${NC} Clear All Caches"
    echo -e "${GREEN} 2.${NC} Clear Xcode Caches & DerivedData"
    echo -e "${GREEN} 3.${NC} Clear Android/Gradle Caches"
    echo -e "${GREEN} 4.${NC} Clear Flutter Caches"
    echo -e "${GREEN} 5.${NC} Clear npm/Yarn/pnpm Caches"
    echo -e "${GREEN} 6.${NC} Clean Homebrew Caches"
    echo -e "${GREEN} 7.${NC} Clear CocoaPods Caches"
    echo -e "${GREEN} 8.${NC} Clear IDE (JetBrains, VSCode) Caches"
    echo -e "${GREEN} 9.${NC} Clean System Junk & Logs (requires sudo)"
    echo -e "${GREEN}10.${NC} Clear Browser Caches (Chrome, Brave, Firefox, Safari, Edge, Opera)"
    echo -e "${GREEN}11.${NC} Scan & Clean Local Build Artifacts (build/dist/out/target/bin)"
    echo ""
    echo -e "‚Üí Please enter your choice (0-11): ${NC}\c"
}

# --- Main Logic ---
main_loop() {
    # Request sudo at the start to cover all options that need it
    echo -e "${YELLOW}This script may require administrator privileges for some cleanup tasks.${NC}"
    echo -e "${YELLOW}You will be prompted to enter your password if needed.${NC}"
    sudo -v
    # Keep sudo session alive in background
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
    SUDO_PID=$!

    while true; do
        display_menu
        read -r choice
        echo "" # New line for better separation

        local initial_free_space=$(get_disk_space)

        case "$choice" in
            0)
                echo -e "${GREEN}Exiting cleanup utility. Goodbye!${NC}"
                break
                ;;
            1)
                print_section_header "Performing ALL Cleanup Tasks"
                cleanup_xcode
                cleanup_android
                cleanup_flutter
                cleanup_npm_yarn
                cleanup_homebrew
                cleanup_cocoapods
                cleanup_ide_caches
                cleanup_system_junk
                cleanup_browser_caches
                ;;
            2)
                print_section_header "Performing Xcode Cleanup"
                cleanup_xcode
                ;;
            3)
                print_section_header "Performing Android/Gradle Cleanup"
                cleanup_android
                ;;
            4)
                print_section_header "Performing Flutter Cleanup"
                cleanup_flutter
                ;;
            5)
                print_section_header "Performing npm/Yarn/pnpm Cleanup"
                cleanup_npm_yarn
                ;;
            6)
                print_section_header "Performing Homebrew Cleanup"
                cleanup_homebrew
                ;;
            7)
                print_section_header "Performing CocoaPods Cleanup"
                cleanup_cocoapods
                ;;
            8)
                print_section_header "Performing IDE Caches Cleanup"
                cleanup_ide_caches
                ;;
            9)
                print_section_header "Performing System Junk & Logs Cleanup"
                cleanup_system_junk
                ;;
            10)
                print_section_header "Performing Browser Caches Cleanup"
                cleanup_browser_caches
                ;;
            11)
                print_section_header "Scan & Clean Local Build Artifacts"
                cleanup_local_build_artifacts
                ;;
            *)
                echo -e "${RED}Invalid choice. Please enter a number between 0 and 11.${NC}"
                sleep 2
                ;;
        esac

        local final_free_space=$(get_disk_space)
        echo ""
        echo -e "${GREEN}‚úÖ Cleanup task(s) completed!${NC}"
        echo -e "${BLUE}Disk space before: ${initial_free_space}${NC}"
        echo -e "${BLUE}Disk space after:  ${final_free_space}${NC}"
        echo ""
        read -p "Press Enter to return to the menu..."
    done

    # Kill the background sudo-keep-alive process
    kill "$SUDO_PID" 2>/dev/null
    echo -e "${GREEN}Cleanup session ended.${NC}"
}

# --- Initial check for user confirmation before starting the interactive menu ---
clear
echo -e "${RED}--- üöÄ Dev Cleanup Utility ---${NC}"
echo "This script will permanently delete cache files from your system."
echo "Review the options carefully before proceeding."
echo ""
echo -e "${YELLOW}‚ö†Ô∏è This action is IRREVERSIBLE for deleted files. ‚ö†Ô∏è${NC}"
echo -e "${YELLOW}Please CLOSE all development applications (Xcode, Android Studio, VSCode, etc.) before running.${NC}"
echo ""
read -p "Are you sure you want to start the cleanup utility? (y/N): " initial_confirm
if [[ "$initial_confirm" != "y" && "$initial_confirm" != "Y" ]]; then
    echo "Cleanup utility cancelled."
    exit 0
fi

main_loop
